/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
module org.eclipse.xtend.core.GenerateXtend

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.generator.parser.antlr.*
import org.eclipse.xtext.resource.XtextResourceSet 

var rootPath = ".."
var baseName = "org.eclipse.xtend.core"
var projectPath = "${rootPath}/${baseName}"

var file.extensions = "xtend"

var lineDelimiter = "\n"
var backtrack = false
var memoize = false
var skipUnusedRules = true
var stripAllComments = true

var fileHeader = "/*******************************************************************************
 * Copyright (c) 2010-\${year} itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/"

Workflow {
	bean = StandaloneSetup {
		ignoreBrokenProjectFiles = true
		scanClassPath = true
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
	}
	
	bean = StandaloneSetup {
		resourceSet = XtextResourceSet : resourceSet {}
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore"
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xtype.ecore"
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.ecore"
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.xbase/model/XAnnotations.ecore"
		registerEcoreFile = "platform:/resource/${baseName}/model/Xtend.ecore"
	}
	
	component = DirectoryCleaner {
		directory = "${projectPath}/emf-gen"
	}

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${baseName}/model/Xtend.genmodel"
		srcPath ="platform:/resource/${baseName}/src"
		srcPath ="platform:/resource/org.eclipse.xtext.common.types/src"
		srcPath ="platform:/resource/org.eclipse.xtext.xbase/src"
		lineDelimiter = lineDelimiter
	}
	
	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${baseName}/model/RichStrings.genmodel"
		srcPath ="platform:/resource/${baseName}/src"
		srcPath ="platform:/resource/org.eclipse.xtext.common.types/src"
		srcPath ="platform:/resource/org.eclipse.xtext.xbase/src"
		lineDelimiter = lineDelimiter
	}
	
	component = parser.JFlexLoader : jFlexMain {}

	component = XtextGenerator auto-inject {
		configuration = parser.XtendGeneratorModule {
			project = WizardConfig auto-inject {
				eclipseEditor = true
				eclipsePluginProjectName = "org.eclipse.xtend.ide"
				genericIdeSupport = true
				genericIdeProjectName = "org.eclipse.xtend.ide.common"
				ideaEditor = true
				ideaPluginRoot = "../../intellij/org.eclipse.xtend.idea"
			}
			code = {
				encoding = "ISO-8859-1"
				lineDelimiter = lineDelimiter
				fileHeader = fileHeader
				preferXtendStubs = false
			}
		}
		language = {
			resourceSet = resourceSet
			uri = "classpath:/org/eclipse/xtend/core/Xtend.xtext"
			fileExtensions = file.extensions
			guiceModule = parser.XtendLanguageGeneratorModule {}
			
			fragment = grammarAccess.GrammarAccessFragment2 auto-inject {}
			fragment = adapter.FragmentAdapter {
				fragment = serializer.SerializerFragment {
					// generateDebugData = true
				}
			}
			fragment = adapter.FragmentAdapter {
				fragment = resourceFactory.ResourceFactoryFragment {
					fileExtensions = file.extensions
				}
			}
			fragment = adapter.FragmentAdapter {
				fragment = parser.ParserGenerator auto-inject {
					options = auto-inject {}
				}
			}
			fragment = adapter.FragmentAdapter {
				fragment = DebugAntlrGeneratorFragment auto-inject {
					options = auto-inject {}
				}
			}
			fragment = validation.ValidatorFragment2 {}
			fragment = formatting.Formatter2Fragment2 {}
			fragment = generator.GeneratorFragment2 {}
			fragment = scoping.ImportNamespacesScopingFragment2 {}
			fragment = builder.BuilderIntegrationFragment2 {}
			fragment = adapter.FragmentAdapter {
				fragment = quickfix.QuickfixProviderFragment {}
			}
			fragment = adapter.FragmentAdapter {
				fragment = labeling.LabelProviderFragment {
					generateStub = false
				}
			}

			fragment = ui.outline.OutlineTreeProviderFragment2 {}

			fragment = adapter.FragmentAdapter {
				fragment = outline.QuickOutlineFragment {}
			}
			fragment = adapter.FragmentAdapter {
				fragment = compare.CompareFragment {
					fileExtensions = file.extensions
				}
			}
			fragment = adapter.FragmentAdapter {
				fragment = contentAssist.JavaBasedContentAssistFragment {}
			}
			fragment = adapter.FragmentAdapter {
				fragment = parser.ContentAssistParserGenerator auto-inject {
					removeBacktrackingGuards = true
					lookaheadThreshold = '5'
					options = auto-inject {}
					partialParsing = true
				}
			}
			fragment = adapter.FragmentAdapter {
				fragment = refactoring.RefactorElementNameFragment {
					useJdtRefactoring = true
				}
			}
			fragment = types.TypesGeneratorFragment2 {}
			fragment = xbase.XbaseGeneratorFragment2 {
				generateXtendInferrer = false
			}
			fragment = adapter.FragmentAdapter {
				fragment = templates.CodetemplatesGeneratorFragment {
					suppressRestriction = false
				}
			}
			fragment = adapter.FragmentAdapter {
				fragment = parser.JFlexGeneratorFragment auto-inject {
					patternPath = "/org/eclipse/xtend/core/parser/antlr/internal/patterns.incl"
					additionalRulePath = "/org/eclipse/xtend/core/parser/antlr/internal/rules.incl"
				}
			}
			fragment = adapter.FragmentAdapter {
				fragment = parser.JFlexGeneratorFragment auto-inject {
					ui = true
					patternPath = "/org/eclipse/xtend/core/parser/antlr/internal/patterns.incl"
					additionalRulePath = "/org/eclipse/xtend/core/parser/antlr/internal/rules.incl"
				}
			}
			fragment = org.eclipse.xtext.xtext.generator.idea.parser.antlr.XtextAntlrIDEAGeneratorFragment auto-inject {
				options = auto-inject {}
			}
			fragment = org.eclipse.xtext.xtext.generator.idea.IdeaPluginGenerator auto-inject {}
		}
	}
}
