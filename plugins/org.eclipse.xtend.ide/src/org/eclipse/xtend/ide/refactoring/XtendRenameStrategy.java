/*
* generated by Xtext
*/
package org.eclipse.xtend.ide.refactoring;

import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.ltk.core.refactoring.resource.RenameResourceChange;
import org.eclipse.xtend.core.xtend.XtendClass;
import org.eclipse.xtend.core.xtend.XtendConstructor;
import org.eclipse.xtend.core.xtend.XtendFunction;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.ui.refactoring.IRefactoringUpdateAcceptor;
import org.eclipse.xtext.ui.refactoring.IRenameStrategy;
import org.eclipse.xtext.ui.refactoring.impl.DefaultRenameStrategyProvider;
import org.eclipse.xtext.ui.refactoring.impl.RefactoringException;
import org.eclipse.xtext.ui.refactoring.ui.IRenameElementContext;
import org.eclipse.xtext.xbase.ui.jvmmodel.refactoring.DefaultJvmModelRenameStrategy;

import com.google.inject.Inject;

/**
 * Encapsulates the model changes of a rename refactoring.
 */
public class XtendRenameStrategy extends DefaultJvmModelRenameStrategy {

	@Override
	public boolean initialize(EObject targetElement, IRenameElementContext context) {
		return super.initialize(targetElement, context);
	}
	
	@Override
	public void createDeclarationUpdates(String newName, ResourceSet resourceSet,
			IRefactoringUpdateAcceptor updateAcceptor) {
		super.createDeclarationUpdates(newName, resourceSet, updateAcceptor);
		IPath path = getPathToRename(getTargetElementOriginalURI(), resourceSet);
		if (path != null && path.lastSegment().equals(this.getOriginalName()+".xtend"))
			updateAcceptor.accept(getTargetElementOriginalURI().trimFragment(), new RenameResourceChange(path, newName
					+ "." + path.getFileExtension()));
	}

	protected IPath getPathToRename(URI elementURI, ResourceSet resourceSet) {
		EObject targetObject = resourceSet.getEObject(elementURI, false);
		if (targetObject instanceof XtendClass) {
			URI resourceURI = EcoreUtil2.getNormalizedResourceURI(targetObject);
			if (!resourceURI.isPlatformResource())
				throw new RefactoringException("Renamed class does not reside in the workspace");
			IPath path = new Path("/").append(new Path(resourceURI.path()).removeFirstSegments(1));
			return path;
		}
		return null;
	}
	
	public static class Provider extends DefaultRenameStrategyProvider {
		@Inject
		private com.google.inject.Provider<DispatchMethodRenameStrategy> dispatchStartegyProvider;
		
		@Override
		public IRenameStrategy get(EObject targetEObject, IRenameElementContext renameElementContext) throws NoSuchStrategyException {
			if(targetEObject instanceof XtendConstructor)
				// Xtend constructors can be ignored in rename refactorings
				return null;
			return super.get(targetEObject, renameElementContext);
		}
		
		@Override
		protected IRenameStrategy createRenameStrategy(EObject targetEObject, IRenameElementContext renameElementContext) {
			if (targetEObject instanceof XtendFunction && ((XtendFunction) targetEObject).isDispatch()) 
				return dispatchStartegyProvider.get();
			else
				return super.createRenameStrategy(targetEObject, renameElementContext);
		}
	}
}
